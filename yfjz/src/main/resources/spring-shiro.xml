<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd">

	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的UserRealm.java -->  
	<bean id="userRealm" class="io.yfjz.shiro.UserRealm"/>
	
	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->  
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->  
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->  
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	    <property name="realm" ref="userRealm"/>
	</bean>

	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
	<!-- id="shiroFilter" 与web.xml中的filter对应的bean -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
	    <!-- Shiro的核心安全接口,这个属性是必须的 -->  
	    <property name="securityManager" ref="securityManager"/>  
	    <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.html"页面 -->  
	    <property name="loginUrl" value="/login.html"/> <!-- 本项目使用的跳转方式是通过controller方法跳转到页面的 -->
	    <!-- 登录成功后要跳转的连接 -->  
	    <property name="successUrl" value="/index.html"/>
	    <!-- 用户访问未对其授权的资源时,所显示的连接 -->  
	    <!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->  
	    <property name="unauthorizedUrl" value="/"/>  
	    <!-- Shiro连接约束配置,即过滤链的定义 -->  
	    <!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->  
	    <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
	    <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->  
	    <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->  
	    <property name="filterChainDefinitions">  
	        <value>
                <!--不需要认证-->
	        	/statics/**=anon
				/queue/**=anon
                <!--login.html=anon-->
				<!--所有以webservice开头的请求，不加权限限定-->
				/webService/**=anon
				/webService/**=anon
				<!--这个是为了在登录界面获取工作台的下拉框-->
				/tbasetower/listAll=anon
				<!--查询是否启用分队列-->
				/inocpointmgr/getQueuesDistinction=anon
	        	/sys/login=anon
				<!--二维码生成图片-->
	        	/captcha.jpg=anon
				<!--websocket路径不加限制-->
				/websockeHandler/** = anon
				/tchildinoculate/queryobservation=anon
				<!--除了上述情况，剩下的资源需要认证才能访问-->
	        	/**=authc
            </value>
		</property>
		<!--
			默认过滤器(10个)
			anon 		## org.apache.shiro.web.filter.authc.AnonymousFilter
			authc 		## org.apache.shiro.web.filter.authc.FormAuthenticationFilter
			authcBasic	## org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter
			perms 		## org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter
			port 		## org.apache.shiro.web.filter.authz.PortFilter
			rest 		## org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter
			roles 		## org.apache.shiro.web.filter.authz.RolesAuthorizationFilter
			ssl 		## org.apache.shiro.web.filter.authz.SslFilter
			user 		## org.apache.shiro.web.filter.authc.UserFilter
			logout 		## org.apache.shiro.web.filter.authc.LogoutFilter


			anon:		例子		/admins/**=anon 没有参数，表示可以匿名使用。
			authc:		例如		/admins/user/**=authc表示需要认证(登录)才能使用，没有参数
			roles：		例子		/admins/user/**=roles[admin],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，当有多个参数时，例如admins/user/**=roles["admin,guest"],每个参数通过才算通过，相当于hasAllRoles()方法。
			perms：		例子		/admins/user/**=perms[user:add:*],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，例如/admins/user/**=perms["user:add:*,user:modify:*"]，当有多个参数时必须每个参数都通过才通过，想当于isPermitedAll()方法。
			rest：		例子		/admins/user/**=rest[user],根据请求的方法，相当于/admins/user/**=perms[user:method] ,其中method为post，get，delete等。
			port：		例子		/admins/user/**=port[8081],当请求的url的端口不是8081是跳转到schemal://serverName:8081?queryString,其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString是你访问的url里的？后面的参数。
			authcBasic：例如		/admins/user/**=authcBasic没有参数表示httpBasic认证
			ssl:		例子		/admins/user/**=ssl没有参数，表示安全的url请求，协议为https
			user:		例如		/admins/user/**=user没有参数表示必须存在用户，当登入操作时不做检查


			关于Shiro的标签应用
			<shiro:authenticated> 				登录之后
			<shiro:notAuthenticated> 			不在登录状态时
			<shiro:guest> 						用户在没有RememberMe时
			<shiro:user> 						用户在RememberMe时
			<shiro:hasAnyRoles name="abc,123" > 在有abc或者123角色时
			<shiro:hasRole name="abc"> 			拥有角色abc
			<shiro:lacksRole name="abc"> 		没有角色abc
			<shiro:hasPermission name="abc"> 	拥有权限abc
			<shiro:lacksPermission name="abc">  没有权限abc
			<shiro:principal> 					显示用户登录名
		-->

	</bean>

	<!--保证实现了Shiro内部lifecycle函数的bean执行-->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<!-- AOP式方法级权限检查  -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    	<property name="securityManager" ref="securityManager"/>
	</bean>
</beans>