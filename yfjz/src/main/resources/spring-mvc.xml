<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.2.xsd
     	http://www.springframework.org/schema/aop
     	http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/mvc
     	http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <bean id="PropertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="1" />
        <property name="ignoreUnresolvablePlaceholders" value="true" />
        <property name="locations">
            <list>
                <!--读取src目录的config.properties文件-->
                <value>classpath:config.properties</value>
            </list>
        </property>
    </bean>
    <!--包自动扫描-->
	<context:component-scan base-package="io.yfjz"/>
    <!--自动注解AOP-->
    <aop:aspectj-autoproxy />
    <!--启动注解 自动注入-->
	<context:annotation-config />

    <!--
        在springMVC-servlet.xml中配置<mvc:default-servlet-handler />后，
        会在Spring MVC上下文中定义一个org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，
        它会像一个检查员，对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，
        就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理。
        在SpringMVC3.0之后推荐使用
    -->
	<mvc:default-servlet-handler />

    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="prefixJson" value="false"/>
                <property name="objectMapper">
                    <bean class="com.fasterxml.jackson.databind.ObjectMapper">
                        <property name="dateFormat">
                            <bean class="java.text.SimpleDateFormat">
                                <constructor-arg value="yyyy-MM-dd HH:mm:ss"/>
                            </bean>
                        </property>
                    </bean>
                </property>
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/json;charset=UTF-8</value>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
            <!--xml 不要header-->
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--**************************************************shiro  在html中使用shiro的标签需要配置下面两个bean ********************************************-->
	<!-- Velocity视图解析器    默认视图  -->
	<bean id="velocityViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
		<property name="contentType" value="text/html;charset=UTF-8" />
		<property name="viewNames" value="*.html" />
        <property name="suffix" value=""/>
        <property name="dateToolAttribute" value="date" />
        <property name="numberToolAttribute" value="number" />
        <!--自定义标签-->
        <property name="toolboxConfigLocation" value="/WEB-INF/velocity-toolbox.xml" />
        <property name="requestContextAttribute" value="rc"/>
        <property name="order" value="0"/>
        <property name="attributesMap">
            <props>
                <prop key="queuerUrl">${queuer.host}</prop>
            </props>
        </property>
	</bean>
	<bean id="velocityConfigurer" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <property name="resourceLoaderPath" value="/WEB-INF/page/" />

        <property name="velocityProperties">
          <props>
            <prop key="input.encoding">UTF-8</prop>
            <prop key="output.encoding">UTF-8</prop>
            <prop key="contentType">text/html;charset=UTF-8</prop>
          </props>
        </property>
	</bean>
    <!--**************************************************shiro  在html中使用shiro的标签需要配置下面两个bean ********************************************-->

	<!-- JSP视图解析器  -->
    <bean id="viewResolverJsp" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/page/"/>
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="viewNames" value="*.jsp" />
        <property name="suffix" value=""/>
        <property name="order" value="1"/>
    </bean>
    
    <!-- FreeMarker视图解析器 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
	    <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
	    <property name="contentType" value="text/html; charset=utf-8"/>
	    <property name="cache" value="false"/>
	    <property name="viewNames" value="*.ftl" />
        <property name="suffix" value=""/>
        <property name="order" value="2"/>
	</bean>
	
	<bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
	    <property name="templateLoaderPath" value="/WEB-INF/page/"/>
	</bean>
	
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="1000000000" />
        <property name="maxInMemorySize" value="4096"/>
	</bean>
	
	<!-- Kaptcha验证码生成器 -->
	<bean name="producer" class="com.google.code.kaptcha.impl.DefaultKaptcha" scope="singleton">
	    <property name="config">
	        <bean class="com.google.code.kaptcha.util.Config">
	            <constructor-arg>
	                <props>
	                    <prop key="kaptcha.border">no</prop>
	                    <prop key="kaptcha.textproducer.font.color">black</prop>
	                    <prop key="kaptcha.textproducer.char.space">5</prop>
	                </props>
	            </constructor-arg>
	        </bean>
	    </property>
	</bean>
    <!--扫描定时任务-->
    <task:annotation-driven scheduler="qbScheduler" mode="proxy"/>
    <task:scheduler id="qbScheduler" />


</beans>